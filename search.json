[{"path":"https://delma.ala.org.au/articles/quick_start_guide.html","id":"formatting-your-metadata-statement","dir":"Articles","previous_headings":"","what":"Formatting your metadata statement","title":"Quick start guide","text":"several points unusual Rmarkdown documents formatted using delma, discuss ","code":""},{"path":"https://delma.ala.org.au/articles/quick_start_guide.html","id":"document-structure","dir":"Articles","previous_headings":"Formatting your metadata statement","what":"Document structure","title":"Quick start guide","text":"Header levels markdown-formatted metadata statements determine nested structure resulting xml. example, markdown file might contain text: parse xml:","code":"# EML ## Dataset ### Title My title <EML>   <dataset>     <title>My title<\/title>   <\/dataset> <EML>"},{"path":"https://delma.ala.org.au/articles/quick_start_guide.html","id":"attributes","dir":"Articles","previous_headings":"Formatting your metadata statement","what":"Attributes","title":"Quick start guide","text":"Attributes can added particular EML tag including list within code block, label used delma link tags attributes. add attributes userId field, example, add following code ## userId heading: include: false tag added content isn’t displayed document knit.","code":"```{r} #| label: 'userId' #| include: false list(directory = \"https://orcid.org\") ```"},{"path":"https://delma.ala.org.au/articles/quick_start_guide.html","id":"setting-a-unique-id","dir":"Articles","previous_headings":"Formatting your metadata statement","what":"Setting a unique ID","title":"Quick start guide","text":"Every EML document must open tag eml, attributes element must contain unique identifier packageId field, well link system within key unique. logical example might DOI: valid alternative might GitHub release: Note eml tag unusual delma added automatically supplied. occurs, tag levels also incremented one account change.","code":"```{r} #| label: 'eml' #| include: false list(packageId = \"https://doi.org/10.32614/CRAN.package.galah\",      system = \"https://doi.org\") ``` ```{r} #| label: 'eml' #| include: false list(packageId = \"https://github.com/AtlasOfLivingAustralia/galah-R/releases/download/v2.1.0/galah_2.1.0.tar.gz\",      system = \"https://github.com\") ```"},{"path":"https://delma.ala.org.au/articles/quick_start_guide.html","id":"dynamic-content","dir":"Articles","previous_headings":"Formatting your metadata statement","what":"Dynamic content","title":"Quick start guide","text":"delma call rmarkdown::render() internally whenever read_md() render_metadata() used, meaning possible add dynamic content metadata statements. boilerplate statement ships delma uses feature automatically populate Title Pubdate fields YAML section, example: also implement dynamic content using inline code:","code":"```{r} #| echo: false #| results: 'asis' # NOTE: This is set using the yaml above; do not edit by hand cat(rmarkdown::metadata$date) ``` This data contains `r readr::read_csv(\"my_data.csv\") |> nrow()` rows."},{"path":"https://delma.ala.org.au/articles/quick_start_guide.html","id":"reading-writing-and-format-conversion","dir":"Articles","previous_headings":"","what":"Reading, writing, and format conversion","title":"Quick start guide","text":"Internally, delma uses lightparser package convert markdown files tibbles, xml2 package convert lists xml write file. two packages, written functions convert tibble list versions EML-formatted markdown. hood, render_metadata() calls read_md(), things: calls rmarkdown::render() chosen file, meaning code blocks inline code executed properly. appends code blocks whose label matches EML tag attributes EML tag; allows quite complex attribute addition without affecting rendered text. ‘cleans’ imported tibble small number required columns. tibble rendered EML using write_eml(). inverse operation accomplished calling read_eml() followed write_md().","code":""},{"path":"https://delma.ala.org.au/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Westgate. Author, maintainer. Shandiya Balasubramaniam. Author. Dax Kellie. Author.","code":""},{"path":"https://delma.ala.org.au/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Westgate M, Balasubramaniam S, Kellie D (2025). delma: Convert Rmarkdown Quarto Documents Ecological Metadata Language. R package version 0.1.0, https://delma.ala.org.au.","code":"@Manual{,   title = {delma: Convert Rmarkdown and Quarto Documents to Ecological Metadata Language},   author = {Martin Westgate and Shandiya Balasubramaniam and Dax Kellie},   year = {2025},   note = {R package version 0.1.0},   url = {https://delma.ala.org.au}, }"},{"path":[]},{"path":"https://delma.ala.org.au/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Convert Rmarkdown and Quarto Documents to Ecological Metadata Language","text":"delma package converting metadata statements written markdown, RMarkdown Quarto markdown Ecological Metadata Language (EML). named genus legless lizards endemic Australia, whose name happens contain letters ‘e’, ‘m’ ‘l’. logo depicts striped legless lizard (Delma impar) style classic mobile game ‘snake’, play observation Delma often mistaken snakes. drawn Martin Westgate. comments, questions suggestions, please contact us.","code":""},{"path":"https://delma.ala.org.au/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convert Rmarkdown and Quarto Documents to Ecological Metadata Language","text":"package active development, yet available CRAN. can install latest development version GitHub : Load package:","code":"install.packages(\"remotes\") remotes::install_github(\"AtlasOfLivingAustralia/delma\") library(delma)"},{"path":"https://delma.ala.org.au/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Convert Rmarkdown and Quarto Documents to Ecological Metadata Language","text":"primary use case delma build metadata statements sharing biodiversity data. first step create markdown file, add headings like conform EML standard. header ‘level’ (.e. number #) used designate degree nesting. don’t want start scratch, can use example statement provided: document can knit like Rmarkdown document, using either ‘knit’ button RStudio, function rmarkdown::knit(). cases render format defined yaml section, defaults html_document, can easily changed. convert document EML, use: Note EML documents use extension .xml. check document formatted accordance EML standard, use: detailed description delma’s capabilities methods, see ‘Quick start guide’ vignette.","code":"use_metadata(\"my_metadata_statement.Rmd\") render_metadata(\"my_metadata_statement.Rmd\",                  \"metadata.xml\") check_metadata(\"metadata.xml\")"},{"path":"https://delma.ala.org.au/index.html","id":"citing-delma","dir":"","previous_headings":"","what":"Citing delma","title":"Convert Rmarkdown and Quarto Documents to Ecological Metadata Language","text":"generate citation package version using, can run: current recommended citation : Westgate MJ, Balasubramaniam S & Kellie D (2025) Convert Rmarkdown Quarto Documents Ecological Metadata Language. R Package version 0.1.0.","code":"citation(package = \"delma\") #> To cite delma in publications use: #>  #>   Westgate M, Balasubramaniam S, Kellie D (2025). _delma: Convert #>   Rmarkdown and Quarto Documents to Ecological Metadata Language_. R #>   package version 0.1.0, <https://delma.ala.org.au>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {delma: Convert Rmarkdown and Quarto Documents to Ecological Metadata Language}, #>     author = {Martin Westgate and Shandiya Balasubramaniam and Dax Kellie}, #>     year = {2025}, #>     note = {R package version 0.1.0}, #>     url = {https://delma.ala.org.au}, #>   }"},{"path":"https://delma.ala.org.au/reference/as_eml_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert metadata to a list — as_eml_list","title":"Convert metadata to a list — as_eml_list","text":"Takes object class xml_document tibble, converts list. converting xml_document, simply wrapper xml2::as_list()","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert metadata to a list — as_eml_list","text":"","code":"as_eml_list(x, ...)  # S3 method for class 'tbl_lp' as_eml_list(x, ...)  # S3 method for class 'tbl_df' as_eml_list(x, ...)  # S3 method for class 'list' as_eml_list(x, ...)  # S3 method for class 'xml_document' as_eml_list(x, ...)"},{"path":"https://delma.ala.org.au/reference/as_eml_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert metadata to a list — as_eml_list","text":"x Object converted ... arguments, currently ignored","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert metadata to a list — as_eml_list","text":"list, nested structure XML/md attributes XML nodes, preserved.","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert metadata to a list — as_eml_list","text":"","code":"if (FALSE) { # \\dontrun{ use_metadata(\"example_metadata.Rmd\") df <- read_md(\"example_metadata.Rmd\") df_list <- as_eml_list(df) } # }"},{"path":"https://delma.ala.org.au/reference/as_eml_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert metadata to a tibble — as_eml_tbl","title":"Convert metadata to a tibble — as_eml_tbl","text":"Takes objects class list xml_document converts tibble particular structure, designed storing nested data. Tibbles required attributes stored list-columns, supported class data.frame.","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert metadata to a tibble — as_eml_tbl","text":"","code":"as_eml_tbl(x, ...)  # S3 method for class 'tbl_df' as_eml_tbl(x, ...)  # S3 method for class 'tbl_lp' as_eml_tbl(x, ...)  # S3 method for class 'list' as_eml_tbl(x, ...)  # S3 method for class 'xml_document' as_eml_tbl(x, ...)"},{"path":"https://delma.ala.org.au/reference/as_eml_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert metadata to a tibble — as_eml_tbl","text":"x Object converted ... arguments, currently ignored","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert metadata to a tibble — as_eml_tbl","text":"object class tbl_df, tbl data.frame, containing following fields: level (int) gives nestedness level node/heading question label (chr) xml tag text (chr) text stored within tag attributes (list) attributes tag","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert metadata to a tibble — as_eml_tbl","text":"","code":"if (FALSE) { # \\dontrun{ df <- xml2::read_xml(\"https://collections.ala.org.au/ws/eml/dr368\") |>   as_eml_tbl() } # }"},{"path":"https://delma.ala.org.au/reference/as_eml_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert metadata to an xml_document — as_eml_xml","title":"Convert metadata to an xml_document — as_eml_xml","text":"Takes character vector, tibble, list converts xml_document, defined xml2 package. converting list, simply wrapper xml2::as_xml_document()","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert metadata to an xml_document — as_eml_xml","text":"","code":"as_eml_xml(x, ...)  # S3 method for class 'tbl_lp' as_eml_xml(x, ...)  # S3 method for class 'tbl_df' as_eml_xml(x, ...)  # S3 method for class 'list' as_eml_xml(x, ...)  # S3 method for class 'xml_document' as_eml_xml(x, ...)"},{"path":"https://delma.ala.org.au/reference/as_eml_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert metadata to an xml_document — as_eml_xml","text":"x Object converted ... arguments, currently ignored","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert metadata to an xml_document — as_eml_xml","text":"xml_document specified nodes attributes.","code":""},{"path":"https://delma.ala.org.au/reference/as_eml_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert metadata to an xml_document — as_eml_xml","text":"","code":"if (FALSE) { # \\dontrun{ use_metadata(\"example.Rmd\")  df <- read_md(\"example.Rmd\") as_eml_xml(df) } # }"},{"path":"https://delma.ala.org.au/reference/as_lp_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert metadata to a lightparser tibble — as_lp_tbl","title":"Convert metadata to a lightparser tibble — as_lp_tbl","text":"Takes objects class tbl_df, list xml_document converts tibble structure required lightparser. Note delma represents object class tbl_lp convenience.","code":""},{"path":"https://delma.ala.org.au/reference/as_lp_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert metadata to a lightparser tibble — as_lp_tbl","text":"","code":"as_lp_tbl(x, ...)  # S3 method for class 'tbl_lp' as_lp_tbl(x, ...)  # S3 method for class 'tbl_df' as_lp_tbl(x, ...)  # S3 method for class 'list' as_lp_tbl(x, ...)  # S3 method for class 'xml_document' as_lp_tbl(x, ...)"},{"path":"https://delma.ala.org.au/reference/as_lp_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert metadata to a lightparser tibble — as_lp_tbl","text":"x Object converted ... arguments, currently ignored","code":""},{"path":"https://delma.ala.org.au/reference/as_lp_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert metadata to a lightparser tibble — as_lp_tbl","text":"object class tbl_lp, tbl_df, tbl data.frame, containing following fields: type (chr) Whether section e.g. YAML, inline text, heading, code block label (chr) tag associated given code block (otherwise NA) params (list) Attributes code block text (list) text section code (list) code section heading (chr) type = heading, value heading heading_level (dbl) heading level heading (.e. number #) section (chr) heading section sits within","code":""},{"path":"https://delma.ala.org.au/reference/as_lp_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert metadata to a lightparser tibble — as_lp_tbl","text":"","code":"if (FALSE) { # \\dontrun{ df <- xml2::read_xml(\"https://collections.ala.org.au/ws/eml/dr368\") |>   as_lp_tbl() } # }"},{"path":"https://delma.ala.org.au/reference/check_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of a metadata statement — check_metadata","title":"Check validity of a metadata statement — check_metadata","text":"Darwin Core standard, metadata statements mandatory must provided Ecological Metadata Language (EML) file called eml.xml. function applies series checks designed GBIF check structure specified xml document consistency standard. Note, however, function check content files, meaning file structurally sound still lacking critical information.","code":""},{"path":"https://delma.ala.org.au/reference/check_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of a metadata statement — check_metadata","text":"","code":"check_metadata(file = NULL, schema = NULL, quiet = FALSE)"},{"path":"https://delma.ala.org.au/reference/check_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of a metadata statement — check_metadata","text":"file EML file check Can either local URL. schema Either NULL (default) compare GBIF profile; URL valid schema (passed internally xml2::read_xml). quiet (logical) messages hidden? Defaults FALSE","code":""},{"path":"https://delma.ala.org.au/reference/check_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of a metadata statement — check_metadata","text":"Invisibly returns tibble showing parsed errors; empty tibble errors identified.","code":""},{"path":"https://delma.ala.org.au/reference/check_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check validity of a metadata statement — check_metadata","text":"function uses local versions dc.xsd, eml-gbif-profile.xsd eml.xsd downloaded http://rs.gbif.org/schema/eml-gbif-profile/1.3/ 2024-09-25.","code":""},{"path":"https://delma.ala.org.au/reference/check_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check validity of a metadata statement — check_metadata","text":"","code":"if (FALSE) { # \\dontrun{ check_eml(file = \"https://collections.ala.org.au/ws/eml/dr368\") } # }"},{"path":"https://delma.ala.org.au/reference/delma-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert metadata between markdown and EML — delma-package","title":"Convert metadata between markdown and EML — delma-package","text":"Ecological Metadata Language common framework describing ecological datasets can shared reused. delma supports users write metadata statements markdown greater transparency ease--use, convert EML efficient transfer.","code":""},{"path":"https://delma.ala.org.au/reference/delma-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert metadata between markdown and EML — delma-package","text":"Main functions use_metadata() - Create boilerplate metadata statement render_metadata() - Render metadata EML document check_metadata() - Run checks EML document Reading writing read_eml()/write_eml() - Read / write EML files tbl_df read_md()/write_md() - Read / write Rmd Qmd files tbl_df Format manipulation as_lp_tbl() - Convert metadata class tbl_lp as_eml_tbl() - Convert metadata class tbl_df as_eml_list() - Convert metadata class list as_eml_xml()- Convert metadata class xml_document","code":""},{"path":"https://delma.ala.org.au/reference/delma-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert metadata between markdown and EML — delma-package","text":"questions, comments suggestions, please email support@ala.org.au.","code":""},{"path":[]},{"path":"https://delma.ala.org.au/reference/delma-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert metadata between markdown and EML — delma-package","text":"Maintainer: Martin Westgate martin.westgate@csiro.au Authors: Shandiya Balasubramaniam shandiya.balasubramaniam@csiro.au Dax Kellie dax.kellie@csiro.au","code":""},{"path":"https://delma.ala.org.au/reference/read_eml.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an EML-formatted metadata document — read_eml","title":"Read an EML-formatted metadata document — read_eml","text":"read_eml() imports metadata EML file workspace tibble.","code":""},{"path":"https://delma.ala.org.au/reference/read_eml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an EML-formatted metadata document — read_eml","text":"","code":"read_eml(file)"},{"path":"https://delma.ala.org.au/reference/read_eml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an EML-formatted metadata document — read_eml","text":"file Filename URL read .","code":""},{"path":"https://delma.ala.org.au/reference/read_eml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an EML-formatted metadata document — read_eml","text":"read_eml() returns object class tbl_df, tbl data.frame (.e. tibble).","code":""},{"path":"https://delma.ala.org.au/reference/read_eml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an EML-formatted metadata document — read_eml","text":"","code":"if (FALSE) { # \\dontrun{ # read from a url df <- read_eml(\"https://collections.ala.org.au/ws/eml/dr368\") } # }"},{"path":"https://delma.ala.org.au/reference/read_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Read markdown-formatted metadata — read_md","title":"Read markdown-formatted metadata — read_md","text":"read_md() imports metadata markdown file workspace tibble.","code":""},{"path":"https://delma.ala.org.au/reference/read_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read markdown-formatted metadata — read_md","text":"","code":"read_md(file)"},{"path":"https://delma.ala.org.au/reference/read_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read markdown-formatted metadata — read_md","text":"file Filename read . Must either .md, .Rmd .Qmd file.","code":""},{"path":"https://delma.ala.org.au/reference/read_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read markdown-formatted metadata — read_md","text":"read_md() returns object class tbl_df, tbl data.frame (.e. tibble).","code":""},{"path":"https://delma.ala.org.au/reference/read_md.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read markdown-formatted metadata — read_md","text":"read_md() unusual calls rmarkdown::render() quarto::quarto_render() internally ensure code blocks snippets parsed correctly. ensures dynamic content rendered correctly resulting EML document, makes function considerably slower standard import function. Conceptually, therefore, closer renderer output type tibble traditional read_ function. approach one unusual consequence; prevents 'round-tripping' embedded code. , dynamic content written code snippets within metadata statement rendered plain text EML. EML document later re-imported Rmd using read_eml() write_md(), formerly dynamic content shown plain text. Internally, read_md() calls lightparser::split_to_tbl().","code":""},{"path":"https://delma.ala.org.au/reference/read_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read markdown-formatted metadata — read_md","text":"","code":"if (FALSE) { # \\dontrun{ use_metadata(\"example.Rmd\")  df <- read_md(\"example.Rmd\") } # }"},{"path":"https://delma.ala.org.au/reference/render_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a metadata statement to EML — render_metadata","title":"Render a metadata statement to EML — render_metadata","text":"Basically expanded version rmarkdown::render/quarto::quarto_render convert metadata statement EML. Note process ignores output section supplied yaml, though still supplied rendering via packages. Internally function wraps read_md() write_eml() order; see functions details.","code":""},{"path":"https://delma.ala.org.au/reference/render_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a metadata statement to EML — render_metadata","text":"","code":"render_metadata(   input,   output_file = NULL,   output_dir = NULL,   overwrite = TRUE,   quiet = FALSE )"},{"path":"https://delma.ala.org.au/reference/render_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a metadata statement to EML — render_metadata","text":"input file rendered EML output_file name output file output_dir output directory rendered output_file overwrite (logical) existing file overwritten? Defaults TRUE. quiet (logical) messages suppressed? Defaults FALSE.","code":""},{"path":"https://delma.ala.org.au/reference/render_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a metadata statement to EML — render_metadata","text":"return object; called side-effect rendering file EML.","code":""},{"path":"https://delma.ala.org.au/reference/render_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a metadata statement to EML — render_metadata","text":"","code":"if (FALSE) { # \\dontrun{ use_metadata(\"example.Rmd\")  # assume the user edits the file, then calls: render_metadata(\"example.Rmd\", output_file = \"example.xml\") } # }"},{"path":"https://delma.ala.org.au/reference/use_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an example metadata statement to disk — use_metadata","title":"Write an example metadata statement to disk — use_metadata","text":"function places metadata template address specified \"file\", defaulting \"metadata.Rmd\" working directory. template built way standard rendering rmarkdown Quarto HTML PDF function; also renders valid EML using render_metadata().","code":""},{"path":"https://delma.ala.org.au/reference/use_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an example metadata statement to disk — use_metadata","text":"","code":"use_metadata(file = NULL, overwrite = FALSE, quiet = FALSE)"},{"path":"https://delma.ala.org.au/reference/use_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an example metadata statement to disk — use_metadata","text":"file (string) name resulting file, either .Rmd .Qmd suffix. NULL default metadata.md. overwrite (logical) existing file overwritten? Defaults FALSE. quiet (logical) messages suppressed? Defaults FALSE.","code":""},{"path":"https://delma.ala.org.au/reference/use_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an example metadata statement to disk — use_metadata","text":"return anything workspace; called side-effect placing metadata statement working directory.","code":""},{"path":"https://delma.ala.org.au/reference/use_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an example metadata statement to disk — use_metadata","text":"","code":"if (FALSE) { # \\dontrun{ use_metadata(\"example.Rmd\")  } # }"},{"path":"https://delma.ala.org.au/reference/write_eml.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an EML-formatted metadata document — write_eml","title":"Write an EML-formatted metadata document — write_eml","text":"write_eml() writes tibble, list xml_document EML file. Note EML files always file extension .xml.","code":""},{"path":"https://delma.ala.org.au/reference/write_eml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an EML-formatted metadata document — write_eml","text":"","code":"write_eml(x, file)"},{"path":"https://delma.ala.org.au/reference/write_eml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an EML-formatted metadata document — write_eml","text":"x Object class handled delma; .e. tbl_df, list xml_document. file Filename write ","code":""},{"path":"https://delma.ala.org.au/reference/write_eml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an EML-formatted metadata document — write_eml","text":"Desn't return anything; called side-effect writing specified EML file disk","code":""},{"path":"https://delma.ala.org.au/reference/write_eml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an EML-formatted metadata document — write_eml","text":"","code":"if (FALSE) { # \\dontrun{ use_metadata(\"example.Rmd\")  df <- read_md(\"example.Rmd\") write_eml(df, \"example.xml\") } # }"},{"path":"https://delma.ala.org.au/reference/write_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a markdown-formatted metadata document — write_md","title":"Write a markdown-formatted metadata document — write_md","text":"Write markdown-formatted metadata document","code":""},{"path":"https://delma.ala.org.au/reference/write_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a markdown-formatted metadata document — write_md","text":"","code":"write_md(x, file)"},{"path":"https://delma.ala.org.au/reference/write_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a markdown-formatted metadata document — write_md","text":"x Object class handled delma; .e. tbl_lp, tbl_df, list xml_document. file Filename write . Must either .md, .Rmd .Qmd file.","code":""},{"path":"https://delma.ala.org.au/reference/write_md.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a markdown-formatted metadata document — write_md","text":"Similar read_md(), write_md() considerably less generic write_ functions. x xml_document convert seamlessly; lists tibbles manually formatted require care. Internally, write_md() calls lightparser::combine_tbl_to_file.","code":""},{"path":"https://delma.ala.org.au/reference/write_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a markdown-formatted metadata document — write_md","text":"","code":"if (FALSE) { # \\dontrun{ df <- read_eml(\"https://collections.ala.org.au/ws/eml/dr368\") write_eml(df, \"example.xml\") } # }"},{"path":"https://delma.ala.org.au/news/index.html","id":"delma-010","dir":"Changelog","previous_headings":"","what":"delma 0.1.0","title":"delma 0.1.0","text":"Welcome {delma}! ’re new . hope like .","code":""}]
